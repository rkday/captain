#!/usr/bin/env python

import os
import sys
import daemon
import logging
import optparse
import eventlet
import contextlib
import logging.handlers

from daemon.pidlockfile import PIDLockFile

from thread_apt_server.server import Server

def main():
    parser = optparse.OptionParser()

    parser.add_option('--logfile', dest='log_file')
    parser.add_option('--pidfile', dest='pid_file', default='')
    parser.add_option('--verbosity', dest='verbosity', default=2, type='int')

    parser.add_option('--archive-root', dest='archive_root', default='./root')
    parser.add_option('--gpg-home', dest='gpg_home', default='./root/gpghome')
    parser.add_option('--archive', dest='archive', default='stable')
    parser.add_option('--origin', dest='origin', default='thread-apt-server')
    parser.add_option('--port', dest='port', default=3333, type='int')
    parser.add_option('--bind', dest='bind', default='127.0.0.1')

    options, args = parser.parse_args()

    context = noop()
    if options.pid_file:
        context = daemon.DaemonContext(
            pidfile=PIDLockFile(options.pid_file),
            files_preserve=range(daemon.daemon.get_maximum_file_descriptors()),
        )

    for x in ('archive_root', 'gpg_home'):
        # Ensure paths are absolute
        setattr(options, x, os.path.abspath(getattr(options, x)))

        val = getattr(options, x)
        if not os.path.isdir(val):
            print "E: %s is not a directory" % val
            return 1

    eventlet.monkey_patch()

    # Setup logging
    log = logging.getLogger()

    log.setLevel({
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG,
    }[options.verbosity])

    if options.log_file:
        handler = logging.handlers.RotatingFileHandler(
            filename=options.log_file,
            mode='a+',
            maxBytes=2 ** 20,
            backupCount=20,
        )
    else:
        handler = logging.StreamHandler(sys.stderr)

    handler.setFormatter(
        logging.Formatter('%(asctime).19s %(levelname).1s %(message)s')
    )
    log.addHandler(handler)

    # Open sockets, etc. before daemonising
    server = Server(log, options)

    # Try and create files with 644 (rw-r--r--) permissions
    os.umask(022)

    with context:
        server.run()

    return 0

@contextlib.contextmanager
def noop():
    yield

if __name__ == '__main__':
    sys.exit(main())
